# frontend/screens/meals.py
import toga
from toga.style import Pack
from toga.style.pack import COLUMN, CENTER

class MealsScreen(toga.Box):
    def __init__(self, go_back):
        super().__init__(style=Pack(direction=COLUMN, alignment=CENTER, padding=20))

        # T√≠tulo de la pantalla
        title = toga.Label("üçΩÔ∏è Registro de Comidas", style=Pack(font_size=24, padding_bottom=10))
        self.add(title)

        # Campo de entrada para el nombre de la comida
        self.food_input = toga.TextInput(placeholder="Ingrese el nombre del alimento...", style=Pack(padding=5, width=300))
        self.add(self.food_input)

        # Campo de entrada para las calor√≠as
        self.calories_input = toga.TextInput(placeholder="Ingrese las calor√≠as...", style=Pack(padding=5, width=300))
        self.add(self.calories_input)

        # Bot√≥n para registrar la comida
        self.submit_button = toga.Button("‚úÖ Registrar Comida", on_press=self.register_meal, style=Pack(padding=10))
        self.add(self.submit_button)

        # √Årea de mensaje de confirmaci√≥n
        self.message_label = toga.Label("", style=Pack(font_size=16, padding_top=10))
        self.add(self.message_label)

        # Bot√≥n de regreso al men√∫ principal
        self.back_button = toga.Button("üîô Volver al Men√∫", on_press=go_back, style=Pack(padding=10))
        self.add(self.back_button)

    def register_meal(self, widget):
        """Simula el registro de una comida."""
        food_name = self.food_input.value.strip()
        calories = self.calories_input.value.strip()

        if food_name and calories.isdigit():
            self.message_label.text = f"‚úÖ Comida registrada: {food_name} ({calories} kcal)"
        else:
            self.message_label.text = "‚ö†Ô∏è Por favor, ingrese un alimento y calor√≠as v√°lidas."

def main():
    return MealsScreen()

